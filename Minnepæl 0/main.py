#!/bin/python3
from sense_hat import SenseHat, ACTION_HELD, ACTION_RELEASED
import time
import random

sense = SenseHat()
sense.set_rotation(270)
meny_selection = 0
meny_max = 6
meny_runned = [False, False, False, False, False, False, False]
interrupt = False

meny_pictures = {0: [
    (245, 66, 35), (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35),
    (245, 176, 35),
    (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 176, 35), (245, 213, 35),
    (250, 232, 31),
    (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 213, 35), (250, 232, 31),
    (255, 246, 162),
    (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 176, 35), (245, 176, 35), (250, 232, 31), (255, 246, 162),
    (255, 255, 255),
    (5, 47, 189), (5, 77, 224), (35, 118, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245),
    (35, 199, 245),
    (5, 77, 224), (35, 118, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245),
    (35, 177, 245),
    (35, 118, 245), (35, 126, 245), (35, 111, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245),
    (35, 118, 245),
    (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (35, 118, 245),
    (5, 77, 224),
],
    1: [
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (255, 255, 255), (208, 2, 27), (208, 2, 27), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (255, 255, 255), (208, 2, 27), (208, 2, 27), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    2: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    3: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    4: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 175, 255), (0, 175, 255), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 175, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    5: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 174, 255), (0, 174, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 174, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 174, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 174, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    6: [
        (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27),
    ]
}


def red_square():
    r = (255, 0, 0)
    for i in range(8):
        sense.set_pixel(i, 0, r)
        sense.set_pixel(0, i, r)
        sense.set_pixel(7, i, r)
        sense.set_pixel(i, 7, r)


def kalles():
    global interrupt
    r = (255, 0, 0)
    b = (0, 0, 255)
    w = (255, 255, 255)
    n_0 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_1 = [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]
    n_2 = [[0, 0], [1, 0], [2, 0], [2, 1], [0, 2], [1, 2], [2, 2], [0, 3], [0, 4], [1, 4], [2, 4]]
    n_3 = [[0, 0], [1, 0], [2, 0], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_4 = [[0, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [2, 4]]
    n_5 = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_6 = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_7 = [[0, 0], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]
    n_8 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_9 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    neg = [[0, 1], [1, 1], [2, 1]]
    pos = [[1, 0], [0, 1], [1, 1], [2, 1], [1, 2]]
    err = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [0, 3], [0, 4], [1, 4], [2, 4]]
    nums = [n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7, n_8, n_9, neg, pos, err]

    def printNm(nm, nm_lst):
        sense.clear()
        if nm < 0:
            for pix in nm_lst[10]:
                sense.set_pixel(pix[0], pix[1], b)
        elif nm > 0:
            for pix in nm_lst[11]:
                sense.set_pixel(pix[0], pix[1], r)
        if nm > 99 or nm < -99:
            for pix in nm_lst[12]:
                sense.set_pixel(1 + pix[0], 3 + pix[1], w)
            for pix in nm_lst[12]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        elif (-10 < nm < 0) or (0 < nm < 10):
            for pix in nm_lst[int(str(abs(nm))[0])]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        elif nm == 0:
            for pix in nm_lst[0]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        else:
            for pix in nm_lst[int(str(abs(nm))[0])]:
                sense.set_pixel(1 + pix[0], 3 + pix[1], w)
            for pix in nm_lst[int(str(abs(nm))[1])]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)

    while not interrupt:
        temp = int(sense.get_temperature())
        printNm(temp, nums)
        time.sleep(0.1)
    temp = int(sense.get_temperature())
    interrupt = False
    return temp


def daniel():
    pass


def even():
    pass


def kai():
    pass


def magnus():
    b = (128, 128, 128)  # Bakgrunn
    p = (255, 0, 255)  # StammePil
    m = (0, 0, 0)  # Midten
    x = (255, 0, 128)  # PilVinge
    W = (255, 255, 255)  # Loading
    COMPASS_DEFAULT = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CN = [
        b, b, b, x, x, b, b, b,
        b, b, x, p, p, x, b, b,
        b, x, b, p, p, b, x, b,
        b, b, b, p, p, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CNE = [
        b, b, b, b, b, x, x, x,
        b, b, b, b, x, b, p, x,
        b, b, b, b, b, p, b, x,
        b, b, b, m, p, b, x, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CE = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, x, b, b,
        b, b, b, b, b, b, x, b,
        b, b, b, m, p, p, p, x,
        b, b, b, m, p, p, p, x,
        b, b, b, b, b, b, x, b,
        b, b, b, b, b, x, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CSE = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, m, p, b, x, b,
        b, b, b, b, b, p, b, x,
        b, b, b, b, x, b, p, x,
        b, b, b, b, b, x, x, x,
    ]

    CS = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, p, p, b, b, b,
        b, x, b, p, p, b, x, b,
        b, b, x, p, p, x, b, b,
        b, b, b, x, x, b, b, b,
    ]

    CSW = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, x, b, p, m, b, b, b,
        x, b, p, b, b, b, b, b,
        x, p, b, x, b, b, b, b,
        x, x, x, b, b, b, b, b,
    ]

    CW = [
        b, b, b, b, b, b, b, b,
        b, b, x, b, b, b, b, b,
        b, x, b, b, b, b, b, b,
        x, p, p, p, m, b, b, b,
        x, p, p, p, m, b, b, b,
        b, x, b, b, b, b, b, b,
        b, b, x, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CNW = [
        x, x, x, b, b, b, b, b,
        x, p, b, x, b, b, b, b,
        x, b, p, b, b, b, b, b,
        b, x, b, p, m, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    SOL_NED = [
        (245, 66, 35), (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35),
        (245, 176, 35), (245, 176, 35),
        (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 176, 35),
        (245, 213, 35), (250, 232, 31),
        (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 213, 35),
        (250, 232, 31), (255, 246, 162),
        (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 176, 35), (245, 176, 35), (250, 232, 31),
        (255, 246, 162), (255, 255, 255),
        (5, 47, 189), (5, 77, 224), (35, 118, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245),
        (35, 199, 245),
        (5, 77, 224), (35, 118, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245),
        (35, 177, 245), (35, 177, 245),
        (35, 118, 245), (35, 126, 245), (35, 111, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245),
        (35, 126, 245), (35, 118, 245),
        (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (35, 118, 245),
        (5, 77, 224),
    ]

    LOADING_COMPLETE = [
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (19, 253, 3),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (19, 253, 3), (19, 253, 3),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (19, 253, 3),
        (19, 253, 3), (255, 255, 255),
        (19, 253, 3), (255, 255, 255), (255, 255, 255), (255, 255, 255), (19, 253, 3), (19, 253, 3),
        (255, 255, 255), (255, 255, 255),
        (19, 253, 3), (19, 253, 3), (255, 255, 255), (19, 253, 3), (19, 253, 3), (255, 255, 255), (255, 255, 255),
        (255, 255, 255),
        (255, 255, 255), (19, 253, 3), (19, 253, 3), (19, 253, 3), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (19, 253, 3), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
    ]

    def welcome():
        sense.set_pixels(SOL_NED)
        time.sleep(1.5)

        # Loadingscreen
        for i, v in enumerate(SOL_NED):
            if i == 7:
                SOL_NED[0:8] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 15:
                SOL_NED[8:16] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 23:
                SOL_NED[16:24] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 31:
                SOL_NED[24:32] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 39:
                SOL_NED[32:40] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 47:
                SOL_NED[40:48] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 55:
                SOL_NED[48:56] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))
            elif i == 63:
                SOL_NED[56:64] = W, W, W, W, W, W, W, W,
                time.sleep(float((random.randint(0, 10)) / 10))

            sense.set_pixels(SOL_NED)

        sense.set_pixels(LOADING_COMPLETE)
        time.sleep(0.5)

    def getIMUValues():
        n = 0  # KRIS
        while True:
            compass = sense.get_compass()

            if compass <= 22.5:
                i = CN

            elif 22.5 < compass <= 67.5:
                i = CNW

            elif 67.5 < compass <= 112.5:
                i = CW

            elif 112.5 < compass <= 157.5:
                i = CSW

            elif 157.5 < compass <= 202.5:
                i = CS

            elif 202.5 < compass <= 247.5:
                i = CSE

            elif 247.5 < compass <= 292.5:
                i = CE

            elif 292.5 < compass <= 337.5:
                i = CNE

            elif compass > 337.5:
                i = CN

            sense.set_pixels(i)

            # Telleverk
            n += 1

    welcome()
    getIMUValues()


def markus():
    start_pressure = sense.get_pressure()
    state = 1

    STATE1 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 74, 74), (24, 53, 211), (24, 53, 211), (74, 74, 74), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE2 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE3 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE4 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 74, 74), (34, 52, 230), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE5 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE6 = [
        (0, 0, 0), (0, 0, 0), (18, 37, 220), (34, 52, 230), (34, 52, 230), (18, 37, 220), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (18, 37, 220), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (18, 37, 220), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 74, 74), (34, 52, 230), (34, 52, 230), (74, 74, 74), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE7 = [
        (245, 166, 35), (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (245, 166, 35), (35, 100, 245), (208, 2, 27), (208, 2, 27),
        (245, 166, 35),
        (245, 166, 35), (208, 2, 27), (35, 100, 245), (245, 166, 35), (245, 166, 35), (35, 100, 245), (208, 2, 27),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (35, 100, 245), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (208, 2, 27), (35, 100, 245), (245, 166, 35), (245, 166, 35), (35, 100, 245), (208, 2, 27),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (245, 166, 35), (35, 100, 245), (35, 100, 245), (245, 166, 35), (208, 2, 27),
        (245, 166, 35),
        (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (245, 166, 35),
        (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (208, 2, 27), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
    ]

    STATE8 = [
        (208, 2, 27), (208, 2, 27), (245, 166, 35), (208, 2, 27), (24, 24, 215), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
        (208, 2, 27), (24, 24, 215), (245, 166, 35), (24, 24, 215), (245, 166, 35), (24, 24, 215), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (24, 24, 215), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215),
        (208, 2, 27),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215),
        (245, 166, 35),
        (245, 166, 35), (24, 24, 215), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (245, 166, 35), (24, 24, 215), (24, 24, 215), (208, 2, 27), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (245, 166, 35), (245, 166, 35), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
    ]

    STATE9 = [
        (248, 231, 28), (18, 45, 211), (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (248, 231, 28),
        (248, 231, 28),
        (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28), (245, 166, 35), (248, 231, 28), (18, 45, 211),
        (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28),
        (18, 45, 211),
        (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28), (245, 166, 35), (248, 231, 28), (245, 166, 35),
        (18, 45, 211),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (18, 45, 211),
        (248, 231, 28),
        (18, 45, 211), (245, 166, 35), (248, 231, 28), (248, 231, 28), (245, 166, 35), (18, 45, 211), (18, 45, 211),
        (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28),
        (245, 166, 35),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28),
        (248, 231, 28),
    ]

    STATE10 = [
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (74, 74, 74),
        (74, 74, 74),
        (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (74, 74, 74),
        (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (74, 74, 74),
        (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
    ]

    STATE11 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE12 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    sense.set_pixels(STATE1)

    while True:
        blowing_pressure = sense.get_pressure() - start_pressure
        if blowing_pressure > 0.2:
            inflate = True
        else:
            inflate = False

        if state == 1:
            if inflate:
                state = 2
                sense.set_pixels(STATE2)
        elif state == 2:
            if inflate:
                state = 3
                sense.set_pixels(STATE3)
            else:
                state = 1
                sense.set_pixels(STATE1)
        elif state == 3:
            if inflate:
                state = 4
                sense.set_pixels(STATE4)
            else:
                state = 2
                sense.set_pixels(STATE2)
        elif state == 4:
            if inflate:
                state = 5
                sense.set_pixels(STATE5)
            else:
                state = 3
                sense.set_pixels(STATE3)
        elif state == 5:
            if inflate:
                state = 6
                sense.set_pixels(STATE6)
            else:
                state = 4
                sense.set_pixels(STATE4)
        elif state == 6:
            if inflate:
                state = 1
                sense.set_pixels(STATE7)
                time.sleep(0.2)
                sense.set_pixels(STATE8)
                time.sleep(0.2)
                sense.set_pixels(STATE9)
                time.sleep(0.2)
                sense.set_pixels(STATE10)
                time.sleep(0.2)
                sense.set_pixels(STATE11)
                time.sleep(0.2)
                sense.set_pixels(STATE12)
                time.sleep(0.2)
                sense.set_pixels(STATE1)
            else:
                state = 5
                sense.set_pixels(STATE5)

        time.sleep(0.5)
    return sense.get_pressure()


j_right_click = False
j_left_click = False
j_middle_click = False


def j_right(event):
    global j_right_click
    if event.action == ACTION_RELEASED:
        j_right_click = True


def j_left(event):
    global j_left_click
    if event.action == ACTION_RELEASED:
        j_left_click = True


def j_middle(event):
    global interrupt
    global j_middle_click
    if event.action == ACTION_RELEASED:
        j_middle_click = True
    elif event.action == ACTION_HELD:
        interrupt = True


def main():
    global meny_selection
    global j_right_click
    global j_left_click
    global j_middle_click
    sense.stick.direction_left = j_left
    sense.stick.direction_right = j_right
    sense.stick.direction_middle = j_middle
    sense.set_pixels(meny_pictures[meny_selection])
    while True:
        if j_right_click:
            j_right_click = False
            meny_selection += 1
            if meny_selection > meny_max:
                meny_selection = 0
        elif j_left_click:
            j_left_click = False
            meny_selection -= 1
            if meny_selection < 0:
                meny_selection = meny_max
        elif j_middle_click:
            j_middle_click = False
            meny_runned[meny_selection] = True
            if meny_selection == 0:
                magnus()
            elif meny_selection == 1:
                temp_karl = kalles()
            elif meny_selection == 2:
                markus()
            elif meny_selection == 3:
                kai()
            elif meny_selection == 4:
                pass
            elif meny_selection == 5:
                pass
            elif meny_selection == 6:
                sense.clear()
                break
        sense.set_pixels(meny_pictures[meny_selection])
        if meny_selection == 6:
            for i in range(len(meny_runned) - 1):
                if meny_runned[i]:
                    sense.set_pixel(1 + i, 7, (0, 255, 0))
                else:
                    sense.set_pixel(1 + i, 7, (255, 255, 255))
        if meny_runned[meny_selection]:
            red_square()


if __name__ == "__main__":
    main()
